/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Workload struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkloadSpec   `json:"spec,omitempty"`
	Status            WorkloadStatus `json:"status,omitempty"`
}

type WorkloadSpecEntitySearchQuery struct {
	// The query.
	Query *string `json:"query" tf:"query"`
}

type WorkloadSpec struct {
	State *WorkloadSpecResource `json:"state,omitempty" tf:"-"`

	Resource WorkloadSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type WorkloadSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The New Relic account ID where you want to create the workload.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The composite query used to compose a dynamic workload.
	// +optional
	CompositeEntitySearchQuery *string `json:"compositeEntitySearchQuery,omitempty" tf:"composite_entity_search_query"`
	// A list of entity GUIDs manually assigned to this workload.
	// +optional
	EntityGuids []string `json:"entityGuids,omitempty" tf:"entity_guids"`
	// A list of search queries that define a dynamic workload.
	// +optional
	EntitySearchQuery []WorkloadSpecEntitySearchQuery `json:"entitySearchQuery,omitempty" tf:"entity_search_query"`
	// The unique entity identifier of the workload in New Relic.
	// +optional
	Guid *string `json:"guid,omitempty" tf:"guid"`
	// The workload's name.
	Name *string `json:"name" tf:"name"`
	// The URL of the workload.
	// +optional
	Permalink *string `json:"permalink,omitempty" tf:"permalink"`
	// A list of account IDs that will be used to get entities from.
	// +optional
	ScopeAccountIDS []int64 `json:"scopeAccountIDS,omitempty" tf:"scope_account_ids"`
	// The unique entity identifier of the workload.
	// +optional
	WorkloadID *int64 `json:"workloadID,omitempty" tf:"workload_id"`
}

type WorkloadStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WorkloadList is a list of Workloads
type WorkloadList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Workload CRD objects
	Items []Workload `json:"items,omitempty"`
}
