/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AlertCondition struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlertConditionSpec   `json:"spec,omitempty"`
	Status            AlertConditionStatus `json:"status,omitempty"`
}

type AlertConditionSpecCritical struct {
	Duration *int64 `json:"duration" tf:"duration"`
	// +optional
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function"`
	// +optional
	Value *float64 `json:"value,omitempty" tf:"value"`
}

type AlertConditionSpecWarning struct {
	Duration *int64 `json:"duration" tf:"duration"`
	// +optional
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function"`
	// +optional
	Value *float64 `json:"value,omitempty" tf:"value"`
}

type AlertConditionSpec struct {
	State *AlertConditionSpecResource `json:"state,omitempty" tf:"-"`

	Resource AlertConditionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type AlertConditionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The operator used to evaluate the threshold value. Valid values are above, below, and equal. Supported by the infra_metric and infra_process_running condition types.
	// +optional
	Comparison *string `json:"comparison,omitempty" tf:"comparison"`
	// The timestamp the alert condition was created.
	// +optional
	CreatedAt *int64 `json:"createdAt,omitempty" tf:"created_at"`
	// Identifies the threshold parameters for opening a critical alert violation.
	// +optional
	Critical *AlertConditionSpecCritical `json:"critical,omitempty" tf:"critical"`
	// The description of the Infrastructure alert condition.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Whether the condition is turned on or off. Valid values are true and false. Defaults to true.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// The metric event; for example, SystemSample or StorageSample. Supported by the infra_metric condition type.
	// +optional
	Event *string `json:"event,omitempty" tf:"event"`
	// For alerts on integrations, use this instead of event. Supported by the infra_metric condition type.
	// +optional
	IntegrationProvider *string `json:"integrationProvider,omitempty" tf:"integration_provider"`
	// The Infrastructure alert condition's name.
	Name *string `json:"name" tf:"name"`
	// The ID of the alert policy where this condition should be used.
	PolicyID *int64 `json:"policyID" tf:"policy_id"`
	// Any filters applied to processes; for example: commandName = 'java'. Supported by the infra_process_running condition type.
	// +optional
	ProcessWhere *string `json:"processWhere,omitempty" tf:"process_where"`
	// Runbook URL to display in notifications.
	// +optional
	RunbookURL *string `json:"runbookURL,omitempty" tf:"runbook_url"`
	// The attribute name to identify the metric being targeted; for example, cpuPercent, diskFreePercent, or memoryResidentSizeBytes. The underlying API will automatically populate this value for Infrastructure integrations (for example diskFreePercent), so make sure to explicitly include this value to avoid diff issues. Supported by the infra_metric condition type.
	// +optional
	Select *string `json:"select,omitempty" tf:"select"`
	// The type of Infrastructure alert condition. Valid values are infra_process_running, infra_metric, and infra_host_not_reporting.
	Type *string `json:"type" tf:"type"`
	// The timestamp the alert condition was last updated.
	// +optional
	UpdatedAt *int64 `json:"updatedAt,omitempty" tf:"updated_at"`
	// Determines how much time, in hours, will pass before a violation is automatically closed. Valid values are 1, 2, 4, 8, 12, 24, 48, or 72
	// +optional
	ViolationCloseTimer *int64 `json:"violationCloseTimer,omitempty" tf:"violation_close_timer"`
	// Identifies the threshold parameters for opening a warning alert violation.
	// +optional
	Warning *AlertConditionSpecWarning `json:"warning,omitempty" tf:"warning"`
	// If applicable, this identifies any Infrastructure host filters used; for example: hostname LIKE '%cassandra%'.
	// +optional
	Where *string `json:"where,omitempty" tf:"where"`
}

type AlertConditionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AlertConditionList is a list of AlertConditions
type AlertConditionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AlertCondition CRD objects
	Items []AlertCondition `json:"items,omitempty"`
}
