/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Dashboard struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DashboardSpec   `json:"spec,omitempty"`
	Status            DashboardStatus `json:"status,omitempty"`
}

type DashboardSpecPageWidgetAreaNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetArea struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetAreaNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                 `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetBarNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetBar struct {
	Column *int64 `json:"column" tf:"column"`
	// Use this item to filter the current dashboard
	// +optional
	FilterCurrentDashboard *bool `json:"filterCurrentDashboard,omitempty" tf:"filter_current_dashboard"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.
	// +optional
	LinkedEntityGuids []string                              `json:"linkedEntityGuids,omitempty" tf:"linked_entity_guids"`
	NrqlQuery         []DashboardSpecPageWidgetBarNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row               *int64                                `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetBillboardNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetBillboard struct {
	Column *int64 `json:"column" tf:"column"`
	// The critical threshold value.
	// +optional
	Critical *float64 `json:"critical,omitempty" tf:"critical"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                     `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetBillboardNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                      `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// The warning threshold value.
	// +optional
	Warning *float64 `json:"warning,omitempty" tf:"warning"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetBulletNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetBullet struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// The maximum value for the visualization
	// +optional
	Limit     *float64                                 `json:"limit,omitempty" tf:"limit"`
	NrqlQuery []DashboardSpecPageWidgetBulletNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                   `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetFunnelNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetFunnel struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                  `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetFunnelNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                   `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetHeatmapNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetHeatmap struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                   `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetHeatmapNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                    `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetHistogramNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetHistogram struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                     `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetHistogramNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                      `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetJSONNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetJSON struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetJSONNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                 `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetLineNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetLine struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetLineNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                 `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetMarkdown struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID  *string `json:"ID,omitempty" tf:"id"`
	Row *int64  `json:"row" tf:"row"`
	// +optional
	Text *string `json:"text,omitempty" tf:"text"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetPieNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetPie struct {
	Column *int64 `json:"column" tf:"column"`
	// Use this item to filter the current dashboard
	// +optional
	FilterCurrentDashboard *bool `json:"filterCurrentDashboard,omitempty" tf:"filter_current_dashboard"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.
	// +optional
	LinkedEntityGuids []string                              `json:"linkedEntityGuids,omitempty" tf:"linked_entity_guids"`
	NrqlQuery         []DashboardSpecPageWidgetPieNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row               *int64                                `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetStackedBarNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetStackedBar struct {
	Column *int64 `json:"column" tf:"column"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID        *string                                      `json:"ID,omitempty" tf:"id"`
	NrqlQuery []DashboardSpecPageWidgetStackedBarNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row       *int64                                       `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPageWidgetTableNrqlQuery struct {
	// The account id used for the NRQL query.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The NRQL query.
	Query *string `json:"query" tf:"query"`
}

type DashboardSpecPageWidgetTable struct {
	Column *int64 `json:"column" tf:"column"`
	// Use this item to filter the current dashboard
	// +optional
	FilterCurrentDashboard *bool `json:"filterCurrentDashboard,omitempty" tf:"filter_current_dashboard"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.
	// +optional
	LinkedEntityGuids []string                                `json:"linkedEntityGuids,omitempty" tf:"linked_entity_guids"`
	NrqlQuery         []DashboardSpecPageWidgetTableNrqlQuery `json:"nrqlQuery" tf:"nrql_query"`
	Row               *int64                                  `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpecPage struct {
	// The dashboard page's description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	// +optional
	Guid *string `json:"guid,omitempty" tf:"guid"`
	// The dashboard page's name.
	Name *string `json:"name" tf:"name"`
	// An area widget.
	// +optional
	WidgetArea []DashboardSpecPageWidgetArea `json:"widgetArea,omitempty" tf:"widget_area"`
	// A bar widget.
	// +optional
	WidgetBar []DashboardSpecPageWidgetBar `json:"widgetBar,omitempty" tf:"widget_bar"`
	// A billboard widget.
	// +optional
	WidgetBillboard []DashboardSpecPageWidgetBillboard `json:"widgetBillboard,omitempty" tf:"widget_billboard"`
	// A bullet widget.
	// +optional
	WidgetBullet []DashboardSpecPageWidgetBullet `json:"widgetBullet,omitempty" tf:"widget_bullet"`
	// A funnel widget.
	// +optional
	WidgetFunnel []DashboardSpecPageWidgetFunnel `json:"widgetFunnel,omitempty" tf:"widget_funnel"`
	// A heatmap widget.
	// +optional
	WidgetHeatmap []DashboardSpecPageWidgetHeatmap `json:"widgetHeatmap,omitempty" tf:"widget_heatmap"`
	// A histogram widget.
	// +optional
	WidgetHistogram []DashboardSpecPageWidgetHistogram `json:"widgetHistogram,omitempty" tf:"widget_histogram"`
	// A JSON widget.
	// +optional
	WidgetJSON []DashboardSpecPageWidgetJSON `json:"widgetJSON,omitempty" tf:"widget_json"`
	// A line widget.
	// +optional
	WidgetLine []DashboardSpecPageWidgetLine `json:"widgetLine,omitempty" tf:"widget_line"`
	// A markdown widget.
	// +optional
	WidgetMarkdown []DashboardSpecPageWidgetMarkdown `json:"widgetMarkdown,omitempty" tf:"widget_markdown"`
	// A pie widget.
	// +optional
	WidgetPie []DashboardSpecPageWidgetPie `json:"widgetPie,omitempty" tf:"widget_pie"`
	// A stacked bar widget.
	// +optional
	WidgetStackedBar []DashboardSpecPageWidgetStackedBar `json:"widgetStackedBar,omitempty" tf:"widget_stacked_bar"`
	// A table widget.
	// +optional
	WidgetTable []DashboardSpecPageWidgetTable `json:"widgetTable,omitempty" tf:"widget_table"`
}

type DashboardSpec struct {
	State *DashboardSpecResource `json:"state,omitempty" tf:"-"`

	Resource DashboardSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DashboardSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The New Relic account ID where you want to create the dashboard.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The dashboard's description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The unique entity identifier of the dashboard in New Relic.
	// +optional
	Guid *string `json:"guid,omitempty" tf:"guid"`
	// The dashboard's name.
	Name *string             `json:"name" tf:"name"`
	Page []DashboardSpecPage `json:"page" tf:"page"`
	// The URL of the dashboard.
	// +optional
	Permalink *string `json:"permalink,omitempty" tf:"permalink"`
	// Determines who can see or edit the dashboard. Valid values are private, public_read_only, public_read_write. Defaults to public_read_only.
	// +optional
	Permissions *string `json:"permissions,omitempty" tf:"permissions"`
}

type DashboardStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DashboardList is a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Dashboard CRD objects
	Items []Dashboard `json:"items,omitempty"`
}
