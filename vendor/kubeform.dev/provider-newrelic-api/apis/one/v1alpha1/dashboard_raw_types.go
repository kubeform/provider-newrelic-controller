/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DashboardRaw struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DashboardRawSpec   `json:"spec,omitempty"`
	Status            DashboardRawStatus `json:"status,omitempty"`
}

type DashboardRawSpecPageWidget struct {
	Column *int64 `json:"column" tf:"column"`
	// The configuration of the widget.
	Configuration *string `json:"configuration" tf:"configuration"`
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The ID of the widget.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	// +optional
	LinkedEntityGuids []string `json:"linkedEntityGuids,omitempty" tf:"linked_entity_guids"`
	Row               *int64   `json:"row" tf:"row"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// The visualization ID of the widget.
	VisualizationID *string `json:"visualizationID" tf:"visualization_id"`
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardRawSpecPage struct {
	// The dashboard page's description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	// +optional
	Guid *string `json:"guid,omitempty" tf:"guid"`
	// The dashboard page's name.
	Name *string `json:"name" tf:"name"`
	// A generic widget configuration. Visualization id is required.
	// +optional
	Widget []DashboardRawSpecPageWidget `json:"widget,omitempty" tf:"widget"`
}

type DashboardRawSpec struct {
	State *DashboardRawSpecResource `json:"state,omitempty" tf:"-"`

	Resource DashboardRawSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DashboardRawSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The New Relic account ID where you want to create the dashboard.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The dashboard's description.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The unique entity identifier of the dashboard in New Relic.
	// +optional
	Guid *string `json:"guid,omitempty" tf:"guid"`
	// The dashboard's name.
	Name *string                `json:"name" tf:"name"`
	Page []DashboardRawSpecPage `json:"page" tf:"page"`
	// The URL of the dashboard.
	// +optional
	Permalink *string `json:"permalink,omitempty" tf:"permalink"`
	// Determines who can see or edit the dashboard. Valid values are private, public_read_only, public_read_write. Defaults to public_read_only.
	// +optional
	Permissions *string `json:"permissions,omitempty" tf:"permissions"`
}

type DashboardRawStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DashboardRawList is a list of DashboardRaws
type DashboardRawList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DashboardRaw CRD objects
	Items []DashboardRaw `json:"items,omitempty"`
}
