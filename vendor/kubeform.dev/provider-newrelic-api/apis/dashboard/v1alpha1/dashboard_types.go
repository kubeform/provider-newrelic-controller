/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Dashboard struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DashboardSpec   `json:"spec,omitempty"`
	Status            DashboardStatus `json:"status,omitempty"`
}

type DashboardSpecFilter struct {
	// +optional
	Attributes []string `json:"attributes,omitempty" tf:"attributes"`
	EventTypes []string `json:"eventTypes" tf:"event_types"`
}

type DashboardSpecWidgetCompareWithPresentation struct {
	// The color for the rendered data.
	Color *string `json:"color" tf:"color"`
	// The name for the rendered data.
	Name *string `json:"name" tf:"name"`
}

type DashboardSpecWidgetCompareWith struct {
	// The offset duration for the COMPARE WITH clause.
	OffsetDuration *string `json:"offsetDuration" tf:"offset_duration"`
	// The presentation settings for the rendered data.
	Presentation *DashboardSpecWidgetCompareWithPresentation `json:"presentation" tf:"presentation"`
}

type DashboardSpecWidgetMetric struct {
	// The metric name to display.
	Name *string `json:"name" tf:"name"`
	// The metric scope.
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
	// The metric units.
	// +optional
	Units *string `json:"units,omitempty" tf:"units"`
	// The metric values to display.
	// +optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type DashboardSpecWidget struct {
	// The target account ID to fetch data from, if not the current account.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// Column position of widget from top left, starting at 1.
	Column *int64 `json:"column" tf:"column"`
	// A block describing a COMPARE WITH clause.
	// +optional
	CompareWith []DashboardSpecWidgetCompareWith `json:"compareWith,omitempty" tf:"compare_with"`
	// The ID of a dashboard to link to from the widget's facets.
	// +optional
	DrilldownDashboardID *int64 `json:"drilldownDashboardID,omitempty" tf:"drilldown_dashboard_id"`
	// +optional
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// +optional
	EndTime *int64 `json:"endTime,omitempty" tf:"end_time"`
	// A collection of entity ids to display data for. These are typically application IDs.
	// +optional
	EntityIDS []int64 `json:"entityIDS,omitempty" tf:"entity_ids"`
	// +optional
	Facet *string `json:"facet,omitempty" tf:"facet"`
	// Height of the widget. Valid values are 1 to 3 inclusive. Defaults to 1.
	// +optional
	Height *int64 `json:"height,omitempty" tf:"height"`
	// The limit of distinct data series to display.  Requires `order_by` to be set.
	// +optional
	Limit *int64 `json:"limit,omitempty" tf:"limit"`
	// A nested block that describes a metric.
	// +optional
	Metric []DashboardSpecWidgetMetric `json:"metric,omitempty" tf:"metric"`
	// Description of the widget.
	// +optional
	Notes *string `json:"notes,omitempty" tf:"notes"`
	// Valid NRQL query string.
	// +optional
	Nrql *string `json:"nrql,omitempty" tf:"nrql"`
	// Set the order of result series.  Required when using `limit`.
	// +optional
	OrderBy *string `json:"orderBy,omitempty" tf:"order_by"`
	// +optional
	RawMetricName *string `json:"rawMetricName,omitempty" tf:"raw_metric_name"`
	// Row position of widget from top left, starting at 1.
	Row *int64 `json:"row" tf:"row"`
	// The markdown source to be rendered in the widget.
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// Threshold above which the displayed value will be styled with a red color.
	// +optional
	ThresholdRed *float64 `json:"thresholdRed,omitempty" tf:"threshold_red"`
	// Threshold above which the displayed value will be styled with a yellow color.
	// +optional
	ThresholdYellow *float64 `json:"thresholdYellow,omitempty" tf:"threshold_yellow"`
	// A title for the widget.
	Title *string `json:"title" tf:"title"`
	// How the widget visualizes data.
	Visualization *string `json:"visualization" tf:"visualization"`
	// The ID of the widget.
	// +optional
	WidgetID *int64 `json:"widgetID,omitempty" tf:"widget_id"`
	// Width of the widget. Valid values are 1 to 3 inclusive. Defaults to 1.
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type DashboardSpec struct {
	State *DashboardSpecResource `json:"state,omitempty" tf:"-"`

	Resource DashboardSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type DashboardSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The URL for viewing the dashboard.
	// +optional
	DashboardURL *string `json:"dashboardURL,omitempty" tf:"dashboard_url"`
	// Determines who can edit the dashboard in an account. Valid values are all, editable_by_all, editable_by_owner, or read_only. Defaults to editable_by_all.
	// +optional
	Editable *string `json:"editable,omitempty" tf:"editable"`
	// A nested block that describes a dashboard filter. Exactly one nested filter block is allowed.
	// +optional
	Filter *DashboardSpecFilter `json:"filter,omitempty" tf:"filter"`
	// New Relic One supports a 3 column grid or a 12 column grid. New Relic Insights supports a 3 column grid.
	// +optional
	GridColumnCount *int64 `json:"gridColumnCount,omitempty" tf:"grid_column_count"`
	// The icon for the dashboard.
	// +optional
	Icon *string `json:"icon,omitempty" tf:"icon"`
	// The title of the dashboard.
	Title *string `json:"title" tf:"title"`
	// Determines who can see the dashboard in an account. Valid values are all or owner. Defaults to all.
	// +optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility"`
	// A nested block that describes a visualization. Up to 300 widget blocks are allowed in a dashboard definition.
	// +optional
	// +kubebuilder:validation:MaxItems=300
	Widget []DashboardSpecWidget `json:"widget,omitempty" tf:"widget"`
}

type DashboardStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DashboardList is a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Dashboard CRD objects
	Items []Dashboard `json:"items,omitempty"`
}
