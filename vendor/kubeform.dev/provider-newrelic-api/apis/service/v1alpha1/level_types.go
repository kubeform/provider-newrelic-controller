/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Level struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LevelSpec   `json:"spec,omitempty"`
	Status            LevelStatus `json:"status,omitempty"`
}

type LevelSpecEventsBadEvents struct {
	From *string `json:"from" tf:"from"`
	// +optional
	Where *string `json:"where,omitempty" tf:"where"`
}

type LevelSpecEventsGoodEvents struct {
	From *string `json:"from" tf:"from"`
	// +optional
	Where *string `json:"where,omitempty" tf:"where"`
}

type LevelSpecEventsValidEvents struct {
	From *string `json:"from" tf:"from"`
	// +optional
	Where *string `json:"where,omitempty" tf:"where"`
}

type LevelSpecEvents struct {
	AccountID *int64 `json:"accountID" tf:"account_id"`
	// +optional
	BadEvents *LevelSpecEventsBadEvents `json:"badEvents,omitempty" tf:"bad_events"`
	// +optional
	GoodEvents  *LevelSpecEventsGoodEvents  `json:"goodEvents,omitempty" tf:"good_events"`
	ValidEvents *LevelSpecEventsValidEvents `json:"validEvents" tf:"valid_events"`
}

type LevelSpecObjectiveTimeWindowRolling struct {
	Count *int64  `json:"count" tf:"count"`
	Unit  *string `json:"unit" tf:"unit"`
}

type LevelSpecObjectiveTimeWindow struct {
	Rolling *LevelSpecObjectiveTimeWindowRolling `json:"rolling" tf:"rolling"`
}

type LevelSpecObjective struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Name       *string                       `json:"name,omitempty" tf:"name"`
	Target     *float64                      `json:"target" tf:"target"`
	TimeWindow *LevelSpecObjectiveTimeWindow `json:"timeWindow" tf:"time_window"`
}

type LevelSpec struct {
	State *LevelSpecResource `json:"state,omitempty" tf:"-"`

	Resource LevelSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type LevelSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description *string          `json:"description,omitempty" tf:"description"`
	Events      *LevelSpecEvents `json:"events" tf:"events"`
	Guid        *string          `json:"guid" tf:"guid"`
	Name        *string          `json:"name" tf:"name"`
	// +optional
	Objective []LevelSpecObjective `json:"objective,omitempty" tf:"objective"`
	// +optional
	SliID *string `json:"sliID,omitempty" tf:"sli_id"`
}

type LevelStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LevelList is a list of Levels
type LevelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Level CRD objects
	Items []Level `json:"items,omitempty"`
}
