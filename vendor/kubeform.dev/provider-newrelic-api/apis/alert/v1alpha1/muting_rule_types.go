/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type MutingRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MutingRuleSpec   `json:"spec,omitempty"`
	Status            MutingRuleStatus `json:"status,omitempty"`
}

type MutingRuleSpecConditionConditions struct {
	// The attribute on a violation.
	Attribute *string `json:"attribute" tf:"attribute"`
	// The operator used to compare the attribute's value with the supplied value(s).
	Operator *string `json:"operator" tf:"operator"`
	// The value(s) to compare against the attribute's value.
	// +kubebuilder:validation:MinItems=1
	Values []string `json:"values" tf:"values"`
}

type MutingRuleSpecCondition struct {
	// The individual MutingRuleConditions within the group.
	Conditions []MutingRuleSpecConditionConditions `json:"conditions" tf:"conditions"`
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator *string `json:"operator" tf:"operator"`
}

type MutingRuleSpecSchedule struct {
	// The datetime stamp when the MutingRule schedule should stop repeating.
	// +optional
	EndRepeat *string `json:"endRepeat,omitempty" tf:"end_repeat"`
	// The datetime stamp representing when the MutingRule should end.
	// +optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time"`
	// The frequency the MutingRule schedule repeats. One of [DAILY, WEEKLY, MONTHLY]
	// +optional
	Repeat *string `json:"repeat,omitempty" tf:"repeat"`
	// The number of times the MutingRule schedule should repeat.
	// +optional
	RepeatCount *int64 `json:"repeatCount,omitempty" tf:"repeat_count"`
	// The datetime stamp representing when the MutingRule should start.
	// +optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
	// The time zone that applies to the MutingRule schedule.
	TimeZone *string `json:"timeZone" tf:"time_zone"`
	// The day(s) of the week that a MutingRule should repeat when the repeat field is set to WEEKLY.
	// +optional
	// +kubebuilder:validation:MaxItems=7
	WeeklyRepeatDays []string `json:"weeklyRepeatDays,omitempty" tf:"weekly_repeat_days"`
}

type MutingRuleSpec struct {
	State *MutingRuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource MutingRuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type MutingRuleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The account id of the MutingRule..
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The condition that defines which violations to target.
	Condition *MutingRuleSpecCondition `json:"condition" tf:"condition"`
	// The description of the MutingRule.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Whether the MutingRule is enabled.
	Enabled *bool `json:"enabled" tf:"enabled"`
	// The name of the MutingRule.
	Name *string `json:"name" tf:"name"`
	// The time window when the MutingRule should actively mute violations.
	// +optional
	Schedule *MutingRuleSpecSchedule `json:"schedule,omitempty" tf:"schedule"`
}

type MutingRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MutingRuleList is a list of MutingRules
type MutingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of MutingRule CRD objects
	Items []MutingRule `json:"items,omitempty"`
}
