/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Channel struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelSpec   `json:"spec,omitempty"`
	Status            ChannelStatus `json:"status,omitempty"`
}

type ChannelSpecConfig struct {
	// The API key for integrating with OpsGenie.
	// +optional
	ApiKey *string `json:"-" sensitive:"true" tf:"api_key"`
	// Specifies an authentication password for use with a channel. Supported by the webhook channel type.
	// +optional
	AuthPassword *string `json:"-" sensitive:"true" tf:"auth_password"`
	// Specifies an authentication method for use with a channel. Supported by the webhook channel type. Only HTTP basic authentication is currently supported via the value BASIC.
	// +optional
	AuthType *string `json:"-" sensitive:"true" tf:"auth_type"`
	// Specifies an authentication username for use with a channel. Supported by the webhook channel type.
	// +optional
	AuthUsername *string `json:"authUsername,omitempty" tf:"auth_username"`
	// The base URL of the webhook destination.
	// +optional
	BaseURL *string `json:"-" sensitive:"true" tf:"base_url"`
	// The Slack channel to send notifications to.
	// +optional
	Channel *string `json:"channel,omitempty" tf:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	// +optional
	Headers *map[string]string `json:"-" sensitive:"true" tf:"headers"`
	// Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.
	// +optional
	HeadersString *string `json:"-" sensitive:"true" tf:"headers_string"`
	// true or false. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// +optional
	IncludeJSONAttachment *string `json:"includeJSONAttachment,omitempty" tf:"include_json_attachment"`
	// The key for integrating with VictorOps.
	// +optional
	Key *string `json:"-" sensitive:"true" tf:"key"`
	// A map of key/value pairs that represents the webhook payload. Must provide payload_type if setting this argument.
	// +optional
	Payload *map[string]string `json:"-" sensitive:"true" tf:"payload"`
	// Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects). The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.
	// +optional
	PayloadString *string `json:"-" sensitive:"true" tf:"payload_string"`
	// Can either be application/json or application/x-www-form-urlencoded. The payload_type argument is required if payload is set.
	// +optional
	PayloadType *string `json:"payloadType,omitempty" tf:"payload_type"`
	// A set of recipients for targeting notifications. Multiple values are comma separated.
	// +optional
	Recipients *string `json:"recipients,omitempty" tf:"recipients"`
	// The data center region to store your data. Valid values are US and EU. Default is US.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// The route key for integrating with VictorOps.
	// +optional
	RouteKey *string `json:"-" sensitive:"true" tf:"route_key"`
	// Specifies the service key for integrating with Pagerduty.
	// +optional
	ServiceKey *string `json:"-" sensitive:"true" tf:"service_key"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	// +optional
	Tags *string `json:"tags,omitempty" tf:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	// +optional
	Teams *string `json:"teams,omitempty" tf:"teams"`
	// Your organization's Slack URL.
	// +optional
	Url *string `json:"-" sensitive:"true" tf:"url"`
	// The user ID for use with the user channel type.
	// +optional
	UserID *string `json:"userID,omitempty" tf:"user_id"`
}

type ChannelSpec struct {
	State *ChannelSpecResource `json:"state,omitempty" tf:"-"`

	Resource ChannelSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ChannelSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The New Relic account ID where you want to create alert channels.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The configuration block for the alert channel.
	// +optional
	Config *ChannelSpecConfig `json:"config,omitempty" tf:"config"`
	// (Required) The name of the channel.
	Name *string `json:"name" tf:"name"`
	// (Required) The type of channel. One of: (webhook, email, opsgenie, pagerduty, slack, user, victorops).
	Type *string `json:"type" tf:"type"`
}

type ChannelStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ChannelList is a list of Channels
type ChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Channel CRD objects
	Items []Channel `json:"items,omitempty"`
}
