/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AlertCondition struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlertConditionSpec   `json:"spec,omitempty"`
	Status            AlertConditionStatus `json:"status,omitempty"`
}

type AlertConditionSpecCritical struct {
	// In minutes, must be in the range of 1 to 120 (inclusive).
	// +optional
	// Deprecated
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// One of (above, below, equals). Defaults to 'equals'.
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// Must be 0 or greater. For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold" tf:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-3600 seconds for baseline and outlier conditions, within 120-7200 seconds for static conditions with the sum value function, and within 60-7200 seconds for static conditions with the single_value value function.
	// +optional
	ThresholdDuration *int64 `json:"thresholdDuration,omitempty" tf:"threshold_duration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	// +optional
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences"`
	// Valid values are: 'all' or 'any'
	// +optional
	// Deprecated
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function"`
}

type AlertConditionSpecNrql struct {
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
	// +optional
	EvaluationOffset *int64  `json:"evaluationOffset,omitempty" tf:"evaluation_offset"`
	Query            *string `json:"query" tf:"query"`
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
	// +optional
	// Deprecated
	SinceValue *string `json:"sinceValue,omitempty" tf:"since_value"`
}

type AlertConditionSpecTerm struct {
	// In minutes, must be in the range of 1 to 120 (inclusive).
	// +optional
	// Deprecated
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// One of (above, below, equals). Defaults to 'equals'.
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// One of (critical, warning). Defaults to 'critical'. At least one condition term must have priority set to 'critical'.
	// +optional
	Priority *string `json:"priority,omitempty" tf:"priority"`
	// Must be 0 or greater. For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold" tf:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-3600 seconds for baseline and outlier conditions, within 120-7200 seconds for static conditions with the sum value function, and within 60-7200 seconds for static conditions with the single_value value function.
	// +optional
	ThresholdDuration *int64 `json:"thresholdDuration,omitempty" tf:"threshold_duration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	// +optional
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences"`
	// Valid values are: 'all' or 'any'
	// +optional
	// Deprecated
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function"`
}

type AlertConditionSpecWarning struct {
	// In minutes, must be in the range of 1 to 120 (inclusive).
	// +optional
	// Deprecated
	Duration *int64 `json:"duration,omitempty" tf:"duration"`
	// One of (above, below, equals). Defaults to 'equals'.
	// +optional
	Operator *string `json:"operator,omitempty" tf:"operator"`
	// Must be 0 or greater. For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold" tf:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-3600 seconds for baseline and outlier conditions, within 120-7200 seconds for static conditions with the sum value function, and within 60-7200 seconds for static conditions with the single_value value function.
	// +optional
	ThresholdDuration *int64 `json:"thresholdDuration,omitempty" tf:"threshold_duration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	// +optional
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences"`
	// Valid values are: 'all' or 'any'
	// +optional
	// Deprecated
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function"`
}

type AlertConditionSpec struct {
	State *AlertConditionSpecResource `json:"state,omitempty" tf:"-"`

	Resource AlertConditionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type AlertConditionSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The New Relic account ID for managing your NRQL alert conditions.
	// +optional
	AccountID *int64 `json:"accountID,omitempty" tf:"account_id"`
	// The duration of the time window used to evaluate the NRQL query, in seconds.
	// +optional
	AggregationWindow *int64 `json:"aggregationWindow,omitempty" tf:"aggregation_window"`
	// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER', 'UPPER_ONLY' (case insensitive).
	// +optional
	BaselineDirection *string `json:"baselineDirection,omitempty" tf:"baseline_direction"`
	// Whether to close all open violations when the signal expires.
	// +optional
	CloseViolationsOnExpiration *bool `json:"closeViolationsOnExpiration,omitempty" tf:"close_violations_on_expiration"`
	// A condition term with priority set to critical.
	// +optional
	Critical *AlertConditionSpecCritical `json:"critical,omitempty" tf:"critical"`
	// The description of the NRQL alert condition.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Whether or not to enable the alert condition.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// Number of expected groups when using outlier detection.
	// +optional
	ExpectedGroups *int64 `json:"expectedGroups,omitempty" tf:"expected_groups"`
	// The amount of time (in seconds) to wait before considering the signal expired.
	// +optional
	ExpirationDuration *int64 `json:"expirationDuration,omitempty" tf:"expiration_duration"`
	// Which strategy to use when filling gaps in the signal. If static, the 'fill value' will be used for filling gaps in the signal. Valid values are: 'NONE', 'LAST_VALUE', or 'STATIC' (case insensitive).
	// +optional
	FillOption *string `json:"fillOption,omitempty" tf:"fill_option"`
	// If using the 'static' fill option, this value will be used for filling gaps in the signal.
	// +optional
	FillValue *float64 `json:"fillValue,omitempty" tf:"fill_value"`
	// Whether to look for a convergence of groups when using outlier detection.
	// +optional
	// Deprecated
	IgnoreOverlap *bool `json:"ignoreOverlap,omitempty" tf:"ignore_overlap"`
	// The title of the condition.
	Name *string `json:"name" tf:"name"`
	// A NRQL query.
	Nrql *AlertConditionSpecNrql `json:"nrql" tf:"nrql"`
	// Whether to create a new violation to capture that the signal expired.
	// +optional
	OpenViolationOnExpiration *bool `json:"openViolationOnExpiration,omitempty" tf:"open_violation_on_expiration"`
	// Whether overlapping groups should produce a violation.
	// +optional
	OpenViolationOnGroupOverlap *bool `json:"openViolationOnGroupOverlap,omitempty" tf:"open_violation_on_group_overlap"`
	// The ID of the policy where this condition should be used.
	PolicyID *int64 `json:"policyID" tf:"policy_id"`
	// Runbook URL to display in notifications.
	// +optional
	RunbookURL *string `json:"runbookURL,omitempty" tf:"runbook_url"`
	// A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.
	// +optional
	// +kubebuilder:validation:MaxItems=2
	// +kubebuilder:validation:MinItems=1
	// Deprecated
	Term []AlertConditionSpecTerm `json:"term,omitempty" tf:"term"`
	// The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// Valid values are: 'single_value' or 'sum'
	// +optional
	ValueFunction *string `json:"valueFunction,omitempty" tf:"value_function"`
	// Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS', 'THIRTY_DAYS' (case insensitive).
	// +optional
	// Deprecated
	ViolationTimeLimit *string `json:"violationTimeLimit,omitempty" tf:"violation_time_limit"`
	// Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you select.  Must be in the range of 300 to 2592000 (inclusive)
	// +optional
	ViolationTimeLimitSeconds *int64 `json:"violationTimeLimitSeconds,omitempty" tf:"violation_time_limit_seconds"`
	// A condition term with priority set to warning.
	// +optional
	Warning *AlertConditionSpecWarning `json:"warning,omitempty" tf:"warning"`
}

type AlertConditionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AlertConditionList is a list of AlertConditions
type AlertConditionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AlertCondition CRD objects
	Items []AlertCondition `json:"items,omitempty"`
}
